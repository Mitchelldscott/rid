var searchIndex = JSON.parse('{\
"rid":{"doc":"Doc Template:","t":"GRRRRRRRRRAADRRRRRDRLLLLLLMLMLLLLMLMLLLLMLLLLFLLLLLLLLLLNNNNNGNRRRRRENRRRINNGDGDGELLLLLLLLLLMMLLLLLKAMLKKLLLLMLLLLLLLMLLLLLLLMLLLLLLLLLKKLALALAMLLLLLLLLLLLLDLLLLLLLLLLLLLMDLLLLLLLMLLLLLNNNNEELLLLLLLLLLLLLLLLLLLLLLDDLLLLLLMLLMMLMLLLLLLMLLLLLMMMLMLMLMMMLLLLLL","n":["RIDReport","RID_CYCLE_TIME_MS","RID_CYCLE_TIME_S","RID_CYCLE_TIME_US","RID_DEFAULT_PID","RID_DEFAULT_VID","RID_MODE_INDEX","RID_PACKET_SIZE","RID_PTP_RESERVED_BYTES","RID_TASK_INDEX","ptp","rtnt","Duration","PTP_CRTS_INDEX","PTP_CWTS_INDEX","PTP_HRTS_INDEX","PTP_HWTS_INDEX","SEC_PER_HOUR","TimeStamp","USEC_PER_SEC","add_micros","borrow","borrow","borrow_mut","borrow_mut","client_read","client_read","client_stamp","client_write","fmt","from","from","host_read","host_read","host_stamp","host_write","index","into","into","micros","microseconds","millis","new","new","offset","ptp_offset","read_client_stamp","read_host_stamp","stamp","time","try_from","try_from","try_into","try_into","type_id","type_id","Active","Chunk","Configuration","Data","Init","InputIDBuffer","Kill","MAX_TASKS","MAX_TASK_CONFIG_CHUNKS","MAX_TASK_DATA_BYTES","MAX_TASK_DATA_FLOATS","MAX_TASK_INPUTS","PacketType","Panic","RTNT_DATA_INDEX","RTNT_HDR_INDEX","RTNT_HDR_LENGTH","RTNTask","Standby","Status","TaskBuffer","TaskConfig","TaskData","TaskDataCache","TaskHeader","TaskStatus","as_u8","as_u8","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","chunks","clear_chunks","clear_missing","collect_chunk","collect_status","configure","constant","context","data","deconfigure","default","default","default","emit_chunk","emit_status","empty","eq","eq","first_missing","from","from","from","from","id","init","into","into","into","into","is_init","missing_chunks","missing_chunks","new","new","new","new_chunk","new_nonstreaming_output","new_output","new_output_with_header","publish","reset_chunks","run","size","status_waiting","switch","task_buffer","task_generator","task_input_buffer","task_manager","total_chunks","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","RTConstant","borrow","borrow_mut","configure","deconfigure","default","from","into","new","run","size","try_from","try_into","type_id","value","RTSwitch","borrow","borrow_mut","configure","deconfigure","default","from","into","n_outputs","run","size","try_from","try_into","type_id","Constant","Constant","Switch","Switch","TaskDriver","TaskExecutable","as_u8","borrow","borrow","borrow_mut","borrow_mut","configure","deconfigure","eq","from","from","generate","into","into","new","run","size","try_from","try_from","try_into","try_into","type_id","type_id","TaskManager","TaskNode","borrow","borrow","borrow_mut","borrow_mut","collect","collect_chunk","config_cache","configure","control_spin","data","data_cache","default","driver","empty","from","from","header","init","init_node","inputs","into","into","kill","link","modify","n_inputs","n_nodes","n_outputs","new","nodes","panic_all","rate","spin","status","stream","task","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rid"],[12,"rid::ptp"],[56,"rid::rtnt"],[156,"rid::rtnt::constant"],[171,"rid::rtnt::switch"],[185,"rid::rtnt::task_generator"],[213,"rid::rtnt::task_manager"],[257,"core::fmt"],[258,"core::fmt"],[259,"core::any"],[260,"core::option"]],"d":["Simple type alias for more readability currently does not …","Messaging rate for both host and client in milliseconds","Messaging rate for both host and client in seconds","Messaging rate for both host and client in microseconds","Defualt Dyse Indstries product id","Defualt Dyse Indstries vendor id","Mode of the packet","HID packet size, tried going bigger and things broke","Bytes reserved for PTP","Id of the task this packet is meant for","Precision Timing Protocol","Real Time Numerical Tasks","Lightweight timer object that runs for an hour, than …","Client read time index, client sets and host reads this","Client write time index, client sets and host reads this","Host read time index, host sets and client reads this","Client write time index, host sets and client reads this","Second to Hour constant: seconds = hours * SEC_PER_HOUR","Precision Timing Protocol implementation","Microsecond to Second constant: microseconds = seconds * …","add microseconds to the timer and handle overflow","","","","","update the client read time and save the hosts event stamps","","update the client write time and stamp a buffer","","","Returns the argument unchanged.","Returns the argument unchanged.","update the host read time and save the clients event stamps","","update the host write time and stamp a buffer","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","read the microseconds field","","read the microseconds field as milliseconds","Create a new duration","Create and return a TimeStamp with the given event times","Calculate the PTP offset with the full time of each system","Calculates the PTP offset","Read the client event stamps from a report","Read the host event stamps from a report","Write the microsecond event times to a report","read the timer value in seconds as a floating point","","","","","","","The task is executing normally","a chunk of configuration data","The task is awaiting configuration chunks","data from a streamed task","init data for a crate::rtnt::task_manager::TaskNode","alias for readability","kill","Maximum number of tasks user can spawn","Maximum number of configuration chunks each task can use","Maximum number of bytes in a Tasks output buffer and …","Maximum nuber of floats in a tasks output (use f32, not …","Maximum number of bytes a task can use in its name","Describes the contents of an RIDReport. These variants can …","The task is panicing due to a runtime/configuration error","RTNT Data start","Cnostant RTNT Header index","RTNT Header length","Trait for RTNTasks","No task or driver is initialized","the status of configuration data","alias for readability","Configuration data-structure for tasks.","alias for readability","A buffer for all system outputs","alias for readability","Specifies the state a Task is in and the action required …","Convert Self to a u8","Convert Self to a u8","","","","","","","","","The data","buffer of task data","Get the number of chunks","Clear the chunks","Clear the chunks","Insert a new chunk or reset the current chunks","Copy the chunk status from the buffer.","Once the configuration chunks have all arrived pass the …","Real Time Task: Constant value","current task to publish","Get a reference to the configuration data buffer","Convert the tasks members into a TaskConfig","Create a new exectuable","Create an empty configuration missing all chunks","Construct an empty cache","Copy the configuration data to a buffer","Copy the status data to a buffer","Empty buffer for empty inputs","","","Returns the index of the first missing chunk","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Tells the struct when a new set of chunks is coming","Check if the buffer is being used","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the buffer is being used","Returns the number of missing chunks","Missing chunks of the configuration data","Create a buffer with the given number of chunks and buffer","Create a new status from u8","Create a new type from u8","Inserts chunk into data buffer and clear the missing flag","Write a new mode and TaskBuffer to a task’s cache. This …","Publish a new status and TaskBuffer to a tasks cache. Will …","Publish a new PacketType, TaskHeader and TaskBuffer. This …","Use the context to find the first task with unpublished …","Reset the chunks","Run the executable ","The number of values in the output","If the buffer has an unpublished PacketType::Status Used …","Real Time Task: Switch","Mutable reference to a tasks buffer","Real Time Task Generator","Get a reference to all the requested task buffers. Not a …","Real Time Task Manager","","","","","","","","","","","","","","The switch object","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a non-default Constant task","","","","","","","The switch object","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Simple constant value","A constant value, no inputs, one output (f32)","Simple switch","A simple switch with two inputs and one output (TaskBuffer)","Variants that specify which TaskExecutable to initialize.","Wrapper object to make task types similar enough to have …","Convert to a u8","","","","","Try to configure the tasks private data","Convert a tasks private data into a TaskConfig that can be …","","Returns the argument unchanged.","Returns the argument unchanged.","Generate a TaskExecutable from a driver","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create Self from a u8","Call the task and return the output","Get the number of outputs","","","","","","","Stores and manages all tasks and their data","Node containing an executable, stream, rate, inputs and …","","","","","Collect a packet. This is the TaskManagers interface to a …","Collect a packet containing config data. The data is only …","Buffer containing configuration data for the task","Configure the task. Activates the task if all chunks have …","Produce configuration packets for loaded tasks. This is …","Output data","buffer containing each tasks output data","Create a new TaskManager with no tasks.","The driver assigned to this node","Default constructor","Returns the argument unchanged.","Returns the argument unchanged.","Used to share the current header of a task. This is only …","Copy the TaskNode header data from a buffer to Self","Add a node to the next available index Does nothing if all …","Input Tasks","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Resets all task data and enters  TaskStatus::Standby state.","Unnecesary setter, but sets the inputs","Modify a TaskNode from a TaskExecutable and some header …","number of input values","the number of active nodes","number of output values","Create a TaskNode from a TaskExecutable and some header …","list of nodes","Panic all nodes","Rate this task will execute at","Produce a packet and try configuring or exectuing each …","Status of the task, enables and disables running the task","Speceifies if the data should be streamed","Optional Executable, there is always the max number of …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,1,3,3,3,3,3,3,1,3,3,3,3,3,3,1,3,1,1,1,1,3,3,0,3,3,3,1,1,3,1,3,1,3,12,14,12,14,14,0,14,0,0,0,0,0,0,12,0,0,0,0,12,14,0,0,0,0,0,0,12,14,15,20,12,14,15,20,12,14,15,20,15,15,15,15,15,32,0,20,15,32,32,15,20,15,15,20,12,14,15,15,20,12,14,15,15,15,20,12,14,15,15,15,15,12,14,15,20,20,20,20,15,32,32,20,0,20,0,20,0,15,15,20,12,14,15,20,12,14,15,20,12,14,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,25,25,27,26,27,26,0,0,26,27,26,27,26,27,27,26,27,26,27,27,26,26,27,27,27,26,27,26,27,26,0,0,29,28,29,28,28,29,29,29,28,29,28,28,29,29,29,28,29,29,28,29,29,28,29,29,29,29,28,29,29,28,28,29,28,29,29,29,29,28,29,28,29,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,4,2],5],0,[[3,4,2],5],0,[[3,6],7],[-1,-1,[]],[-1,-1,[]],[[3,4,2],5],0,[[3,4,2],5],0,[[3,8]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],0,[1,2],[2,1],[[2,2,2,2],3],[3,9],[[9,9,9,9],9],[[3,4],[[5,[2,2]]]],[[3,4],[[5,[2,2]]]],[[3,4],5],[1,9],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,13],[14,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[15,8],[15,5],[15,5],[[15,[16,[13]],[16,[13]]],5],[[15,[16,[13]]],8],[[-1,[16,[17]]],18,[]],0,0,[15,[[19,[17]]]],[[-1,[16,[17]]],8,[]],[[],-1,[]],[[],15],[[],20],[15,[[5,[21,17]]]],[15,17],0,[[12,12],18],[[14,14],18],[15,[[22,[8]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[15,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,18],[15,8],0,[[8,[19,[17]]],15],[13,12],[13,14],[[15,8,[16,[13]]],5],[[20,8,14,17],5],[[20,8,14,17],5],[[20,8,14,21,17],5],[[20,8],[[22,[4]]]],[15,5],[[-1,[16,[9]]],23,[]],[-1,8,[]],[[20,8],18],0,[[20,8],[[16,[13]]]],0,[[20,[19,[13]]],[[19,[[16,[13]]]]]],0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[24,[16,[17]]],18],[[24,[16,[17]]],8],[[],24],[-1,-1,[]],[-1,-2,[],[]],[9,24],[[24,[16,[9]]],23],[24,8],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[25,[16,[17]]],18],[[25,[16,[17]]],8],[[],25],[-1,-1,[]],[-1,-2,[],[]],0,[[25,[16,[9]]],23],[25,8],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,0,0,0,0,[26,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[27,[19,[17]]],18],[27,15],[[26,26],18],[-1,-1,[]],[-1,-1,[]],[26,27],[-1,-2,[],[]],[-1,-2,[],[]],[13,26],[[27,[16,[9]]],23],[27,8],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[28,4],18],[[29,[16,[13]],[16,[13]]],5],0,[29,5],[28,[[22,[4]]]],0,0,[[],28],0,[[],29],[-1,-1,[]],[-1,-1,[]],[29,[[5,[21,17]]]],[[29,[16,[13]],[16,[13]]],5],[[28,29],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[29,5],[[29,30],5],[[29,13,31,13,13,26,27],5],0,0,0,[[13,31,13,13,26,27],29],0,[28,5],0,[28,[[22,[4]]]],0,0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[3,"Duration",12],[15,"u32"],[3,"TimeStamp",12],[6,"RIDReport",0],[15,"tuple"],[3,"Formatter",257],[6,"Result",257],[15,"usize"],[15,"f32"],[4,"Result",258],[3,"TypeId",259],[4,"TaskStatus",56],[15,"u8"],[4,"PacketType",56],[3,"TaskConfig",56],[15,"slice"],[6,"TaskBuffer",56],[15,"bool"],[15,"array"],[3,"TaskDataCache",56],[6,"TaskHeader",56],[4,"Option",260],[6,"TaskData",56],[3,"RTConstant",156],[3,"RTSwitch",171],[4,"TaskDriver",185],[4,"TaskExecutable",185],[3,"TaskManager",213],[3,"TaskNode",213],[6,"InputIDBuffer",56],[15,"u16"],[8,"RTNTask",56]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
